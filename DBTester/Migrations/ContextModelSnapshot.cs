// <auto-generated />
using DBTester.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GTISolutions.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DBTester.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Url");

                    b.HasKey("BlogId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("DBTester.Models.Fragrancex", b =>
                {
                    b.Property<int>("ItemID");

                    b.Property<string>("BrandName");

                    b.Property<string>("Description");

                    b.Property<string>("Gender");

                    b.Property<bool>("Instock");

                    b.Property<string>("LargeImageUrl");

                    b.Property<string>("MetricSize");

                    b.Property<string>("ParentCode");

                    b.Property<string>("ProductName");

                    b.Property<double>("RetailPriceUSD");

                    b.Property<string>("Size");

                    b.Property<string>("SmallImageURL");

                    b.Property<string>("Type");

                    b.Property<long?>("Upc");

                    b.Property<double>("WholePriceAUD");

                    b.Property<double>("WholePriceCAD");

                    b.Property<double>("WholePriceEUR");

                    b.Property<double>("WholePriceGBP");

                    b.Property<double>("WholePriceUSD");

                    b.Property<int?>("upcItemID");

                    b.HasKey("ItemID");

                    b.HasIndex("upcItemID");

                    b.ToTable("Fragrancex");
                });

            modelBuilder.Entity("DBTester.Models.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ProfileUser");

                    b.Property<byte[]>("formFile");

                    b.Property<string>("html");

                    b.Property<int>("items");

                    b.Property<int>("markdown");

                    b.Property<int>("max");

                    b.Property<int>("min");

                    b.Property<int>("profit");

                    b.HasKey("ProfileId");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("DBTester.Models.ServiceTimeStamp", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("type");

                    b.HasKey("id");

                    b.ToTable("ServiceTimeStamp");
                });

            modelBuilder.Entity("DBTester.Models.UPC", b =>
                {
                    b.Property<int>("ItemID");

                    b.Property<long?>("Upc");

                    b.HasKey("ItemID");

                    b.ToTable("UPC");
                });

            modelBuilder.Entity("DBTester.Models.Fragrancex", b =>
                {
                    b.HasOne("DBTester.Models.UPC", "upc")
                        .WithMany("fragrancex")
                        .HasForeignKey("upcItemID");
                });
#pragma warning restore 612, 618
        }
    }
}
